{
  "texts": {
    "text0": {
      "content": "text0",
      "from": null,
      "to": "Tutorial"
    },
    "text1": {
      "content": "text1",
      "from": "Tutorial",
      "to": "Tapes"
    },
    "text2": {
      "content": "text2",
      "from": "Tutorial",
      "to": "Basics"
    }
  },

  "groups": {
    "Tutorial": {
      "label": "Tutorial",
      "levels": ["ZERO", "MOVE_L", "MOVE_R"],
      "requires": []
    },
    "Tapes": {
      "label": "Working with 2 tapes",
      "levels": ["ZERO_2", "COPY_TO_MAIN", "COPY_TO_WORK"],
      "requires": ["text1"]
    },
    "Basics": {
      "label": "Basic Operations",
      "levels": ["ADD1", "SUB1", "NEG"],
      "requires": ["text2"]
    }
  },

  "levels": {
    "ZERO": {
      "tooltip": "Writing a 0 on the tape",
      "description": "An example Turing Machine (TM) to get you started\nHere, you have a TM that writes 0 to the tape and moves right.\n\nWe would rather want to write 0 and stay on the same spot. Add states and/or state rules to go back left after having written the 0.",
      "initial_code": "// We start by declaring the START State\nSTART\n// Then we declare a rule that reads any bit b and writes a 0 at that same spot,\n// Then moves right (R) and goes to the state END to end the execution of the Turing Machine\n| 0 -> (0, R), END\n| 1 -> (0, R), END\n",
      "requires": []
    },
    "MOVE_R": {
      "tooltip": "Moving head Right",
      "description": "Write a TM that only moves right and does not modify anything on the tape.",
      "initial_code": "// Declaring a state:\n// START\n// | read_char -> (written_char, head_move), target_state\n",
      "requires": ["ZERO"]
    },
    "MOVE_L": {
      "tooltip": "Moving head Left",
      "description": "Write a TM that only moves left and does not modify anything on the tape.",
      "initial_code": "// Declaring a state:\n// START\n// | read_char -> (written_char, head_move), target_state\n",
      "requires": ["ZERO"]
    },
    "ZERO_2": {
      "tooltip": "Reading and writing with 2 tapes",
      "description": "Write 0 on both tapes and return the head at its initial position.",
      "initial_code": "",
      "requires": []
    },
    "COPY_TO_MAIN": {
      "tooltip": "Copy to the Main tape",
      "description": "Copy the content of the Working tape to the Main tape.\n\nINPUT: arbitraty bit string on the Working tape.",
      "initial_code": "",
      "requires": ["ZERO_2"]
    },
    "COPY_TO_WORK": {
      "tooltip": "Copy to the Work tape",
      "description": "Copy the content of the Main tape to the Working tape.\n\nINPUT: arbitrary bit string on the Main tape.",
      "initial_code": "",
      "requires": ["ZERO_2"]
    },
    "ADD1": {
      "tooltip": "Adding 1 to an input: x + 1",
      "description": "Add 1 to a number written in binary form (modulo 256)\n\nINPUT: number between 0 and 255 in binary form.",
      "initial_code": "",
      "requires": []
    },
    "SUB1": {
      "tooltip": "Subtracting 1 to an input: x - 1",
      "description": "Subtract 1 from a number written in binary form (modulo 256)\n\nINPUT: number between 0 and 255 in binary form.",
      "initial_code": "",
      "requires": []
    },
    "NEG": {
      "tooltip": "Negating an input: -x",
      "description": "Negate a binary number (Two's complement) in place\n\nINPUT: number between -128 and 127 in binary form.",
      "initial_code": "",
      "requires": []
    }
  }
}
